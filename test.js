const _ = require('lodash');
const cssMatcher = require('jest-matcher-css');
const postcss = require('postcss');
const tailwindcss = require('tailwindcss');
const defaultConfig = require('tailwindcss/defaultConfig');
const typographyPlugin = require('./index.js');

const generatePluginCss = (config, pluginOptions = {}) => {
  return postcss(
    tailwindcss(
      _.merge({
        theme: {
          screens: {
            'sm': '640px',
          },
        },
        corePlugins: false,
        plugins: [
          typographyPlugin(pluginOptions),
        ],
      }, config)
    )
  )
  .process('@tailwind utilities', {
    from: undefined,
  })
  .then(result => {
    return result.css;
  });
};

expect.extend({
  toMatchCss: cssMatcher,
});

test('the plugin generates some utilities and responsive variants by default', () => {
  return generatePluginCss().then(css => {
    expect(css).toMatchCss(`
      .ellipsis {
        text-overflow: ellipsis
      }
      .hyphens-none {
        hyphens: none
      }
      .hyphens-manual {
        hyphens: manual
      }
      .hyphens-auto {
        hyphens: auto
      }
      .font-family-unset {
        font-family: inherit
      }
      .font-weight-unset {
        font-weight: inherit
      }
      .font-style-unset {
        font-style: inherit
      }
      .text-size-unset {
        font-size: inherit
      }
      .text-align-unset {
        text-align: inherit
      }
      .leading-unset {
        line-height: inherit
      }
      .tracking-unset {
        letter-spacing: inherit
      }
      .text-color-unset {
        color: inherit
      }
      .text-transform-unset {
        text-transform: inherit
      }
      @media (min-width: 640px) {
        .sm\\:ellipsis {
          text-overflow: ellipsis
        }
        .sm\\:hyphens-none {
          hyphens: none
        }
        .sm\\:hyphens-manual {
          hyphens: manual
        }
        .sm\\:hyphens-auto {
          hyphens: auto
        }
        .sm\\:font-family-unset {
          font-family: inherit
        }
        .sm\\:font-weight-unset {
          font-weight: inherit
        }
        .sm\\:font-style-unset {
          font-style: inherit
        }
        .sm\\:text-size-unset {
          font-size: inherit
        }
        .sm\\:text-align-unset {
          text-align: inherit
        }
        .sm\\:leading-unset {
          line-height: inherit
        }
        .sm\\:tracking-unset {
          letter-spacing: inherit
        }
        .sm\\:text-color-unset {
          color: inherit
        }
        .sm\\:text-transform-unset {
          text-transform: inherit
        }
      }
    `);
  });
});

test('the default utilities can be disabled', () => {
  return generatePluginCss({}, {
    hyphens: false,
    textUnset: false,
  }).then(css => {
    expect(css).toMatchCss(`
      .ellipsis {
        text-overflow: ellipsis
      }
      @media (min-width: 640px) {
        .sm\\:ellipsis {
          text-overflow: ellipsis
        }
      }
    `);
  });
});

test('text indent and text shadow utilities can be generated by adding keys to the theme', () => {
  return generatePluginCss({
    theme: {
      textIndent: {
        '1': '0.25rem',
        '2': '0.5rem',
      },
      textShadow: {
        'default': '0 2px 5px rgba(0, 0, 0, 0.5)',
        'lg': '0 2px 10px rgba(0, 0, 0, 0.5)',
      },
    },
    variants: {
      ellipsis: [],
      hyphens: [],
      textIndent: [],
      textShadow: [],
    },
  }, {
    textUnset: false,
  }).then(css => {
    expect(css).toMatchCss(`
      .indent-1 {
        text-indent: 0.25rem
      }
      .indent-2 {
        text-indent: 0.5rem
      }
      .text-shadow {
        text-shadow: 0 2px 5px rgba(0, 0, 0, 0.5)
      }
      .text-shadow-lg {
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.5)
      }
      .ellipsis {
        text-overflow: ellipsis
      }
      .hyphens-none {
        hyphens: none
      }
      .hyphens-manual {
        hyphens: manual
      }
      .hyphens-auto {
        hyphens: auto
      }
    `);
  });
});

test('variants can be customized', () => {
  return generatePluginCss({
    variants: {
      ellipsis: ['hover'],
      hyphens: ['active'],
    },
  }, {
    textUnset: false,
  }).then(css => {
    expect(css).toMatchCss(`
      .ellipsis {
        text-overflow: ellipsis
      }
      .hover\\:ellipsis:hover {
        text-overflow: ellipsis
      }
      .hyphens-none {
        hyphens: none
      }
      .hyphens-manual {
        hyphens: manual
      }
      .hyphens-auto {
        hyphens: auto
      }
      .active\\:hyphens-none:active {
        hyphens: none
      }
      .active\\:hyphens-manual:active {
        hyphens: manual
      }
      .active\\:hyphens-auto:active {
        hyphens: auto
      }
    `);
  });
});
